{"version":3,"file":"static/js/754.5ecf2439.chunk.js","mappings":"yMAMMA,EAASC,EAAAA,KAAaC,MAAM,CAyBhCC,SAAUF,EAAAA,KAAaG,SAAS,0BAsClC,UAnCc,WACZ,IAEMC,GAAWC,EAAAA,EAAAA,MAOjB,OACE,iCACE,wBAAI,oBACJ,SAAC,KAAD,CACEC,cAbe,CAAEC,MAAO,GAAIL,SAAU,IActCM,iBAAkBT,EAClBU,SAXe,SAACC,EAAD,GAA0B,IAAjBC,EAAgB,EAAhBA,UAC5BP,GAASQ,EAAAA,EAAAA,IAAMF,IACfC,GACD,EAKG,UAKE,UAAC,KAAD,CAAME,aAAa,MAAnB,WACE,6BAAO,SAEL,SAAC,KAAD,CAAOC,YAAY,QAAQC,KAAK,QAAQC,KAAK,WAC7C,SAAC,KAAD,CAAcA,KAAK,QAAQC,UAAU,YAEvC,6BAAO,YAEL,SAAC,KAAD,CAAOH,YAAY,WAAWC,KAAK,WAAWC,KAAK,cACnD,SAAC,KAAD,CAAcA,KAAK,WAAWC,UAAU,YAE1C,mBAAQF,KAAK,SAAb,SAAsB,mBAK/B,C","sources":["pages/LogInPage/LoginPage.jsx"],"sourcesContent":["import { useDispatch } from 'react-redux';\nimport { logIn } from 'redux/auth/auth-operation';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n// import css from './Login.module.css';\n\nconst schema = yup.object().shape({\n  // name: yup\n  //   .string()\n  //   .matches(\n  //     /^[a-zA-Zа-яА-ЯіІєЄїЇ]+(([' -][a-zA-Zа-яА-ЯіІєЄїЇ])?[a-zA-Zа-яА-ЯіІєЄїЇ]*)*$/,\n  //     {\n  //       message:\n  //         \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Dick Thunder, Charles de Batz de Castelmore d'Artagnan\",\n  //     }\n  //   )\n  //   .required(\n  //     \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n  //   ),\n  // number: yup\n  //   .string()\n  //   .matches(\n  //     /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n  //     {\n  //       message:\n  //         'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n  //     }\n  //   )\n  //   .required(\n  //     'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n  //   ),\n  password: yup.string().required('Password is required'),\n});\n\nconst Login = () => {\n  const initialValue = { email: '', password: '' };\n\n  const dispatch = useDispatch();\n\n  const handleSubmit = (user, { resetForm }) => {\n    dispatch(logIn(user));\n    resetForm();\n  };\n\n  return (\n    <>\n      <h2>Log in, please</h2>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form autoComplete=\"off\">\n          <label>\n            Email\n            <Field placeholder=\"Email\" type=\"email\" name=\"email\" />\n            <ErrorMessage name=\"email\" component=\"div\" />\n          </label>\n          <label>\n            Password\n            <Field placeholder=\"Password\" type=\"password\" name=\"password\" />\n            <ErrorMessage name=\"password\" component=\"div\" />\n          </label>\n          <button type=\"submit\">Sign In</button>\n        </Form>\n      </Formik>\n    </>\n  );\n};\nexport default Login;\n"],"names":["schema","yup","shape","password","required","dispatch","useDispatch","initialValues","email","validationSchema","onSubmit","user","resetForm","logIn","autoComplete","placeholder","type","name","component"],"sourceRoot":""}