{"version":3,"file":"static/js/806.7232f997.chunk.js","mappings":"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","sources":["webpack://goit-react-hw-08-phonebook/./src/components/InputForm/InputForm.module.css?12f1","../node_modules/nanoid/index.browser.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutProperties.js","../node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js","../node_modules/clsx/dist/clsx.m.js","components/InputForm/InputForm.jsx","webpack://goit-react-hw-08-phonebook/./src/components/EditModal/EditModal.module.css?4592","components/EditModal/EditModal.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Contacts/Contacts.module.css?5e71","webpack://goit-react-hw-08-phonebook/./src/components/Notification/Notification.module.css?a91f","components/Notification/Notification.jsx","components/Contacts/Contacts.jsx","webpack://goit-react-hw-08-phonebook/./src/components/Filter/Filter.module.css?fad1","components/Filter/Filter.jsx","webpack://goit-react-hw-08-phonebook/./src/pages/ContactsPage/ContactPage.module.css?d4ca","pages/ContactsPage/ContactPage.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"title\":\"InputForm_title__QrfHU\",\"input-form\":\"InputForm_input-form__KwvyV\",\"sub-title\":\"InputForm_sub-title__QYAv2\",\"button\":\"InputForm_button__W0FLC\",\"continue-application\":\"InputForm_continue-application__uFIWN\",\"folder\":\"InputForm_folder__QVNaW\",\"top\":\"InputForm_top__iVpan\",\"paper\":\"InputForm_paper__LrhtQ\",\"pencil\":\"InputForm_pencil__OoWKs\"};","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","import objectWithoutPropertiesLoose from \"./objectWithoutPropertiesLoose.js\";\nexport default function _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n  var target = objectWithoutPropertiesLoose(source, excluded);\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}","function r(e){var t,f,n=\"\";if(\"string\"==typeof e||\"number\"==typeof e)n+=e;else if(\"object\"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(f=r(e[t]))&&(n&&(n+=\" \"),n+=f);else for(t in e)e[t]&&(n&&(n+=\" \"),n+=t);return n}export function clsx(){for(var e,t,f=0,n=\"\";f<arguments.length;)(e=arguments[f++])&&(t=r(e))&&(n&&(n+=\" \"),n+=t);return n}export default clsx;","import { useSelector, useDispatch } from 'react-redux';\nimport { getContacts } from 'redux/contacts/contactSlice';\n\nimport { addContactThunk } from 'redux/contacts/contact-operation';\n\nimport css from 'components/InputForm/InputForm.module.css';\nimport { nanoid } from 'nanoid';\nimport { Formik, Form, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst initialValue = { name: '', number: '' };\nconst schema = yup.object().shape({\n  name: yup\n    .string()\n    .matches(\n      /^[a-zA-Zа-яА-ЯіІєЄїЇ]+(([' -][a-zA-Zа-яА-ЯіІєЄїЇ])?[a-zA-Zа-яА-ЯіІєЄїЇ]*)*$/,\n      {\n        message:\n          \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\",\n      }\n    )\n    .required(\n      \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n    ),\n  number: yup\n    .string()\n    .matches(\n      /\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}/,\n      {\n        message:\n          'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +',\n      }\n    )\n    .required(\n      'Phone number must be digits and can contain spaces, dashes, parentheses and can start with +'\n    ),\n});\n\nexport const InputForm = () => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(getContacts);\n  const loginInputId = nanoid(5);\n  const handleSubmit = (newContact, { resetForm }) => {\n    if (\n      contactsList.some(contact => {\n        return contact.name === newContact.name;\n      })\n    ) {\n      toast.error(`${newContact.name} is alredy in Phonebook `);\n      return;\n    }\n    newContact.id = nanoid(5);\n    dispatch(addContactThunk(newContact));\n    toast.success(`${newContact.name} was added!`);\n    resetForm();\n  };\n\n  return (\n    <section>\n      <h2 className={css.title}>Phonebook</h2>\n      <Formik\n        initialValues={initialValue}\n        validationSchema={schema}\n        onSubmit={handleSubmit}\n      >\n        <Form className={css['input-form']}>\n          <label htmlFor={loginInputId} className={css['sub-title']}>\n            Name\n            <Field\n              id={loginInputId}\n              type=\"text\"\n              name=\"name\"\n              placeholder=\"Enter the contact's name...\"\n            />\n            <ErrorMessage name=\"name\" component=\"div\" />\n          </label>\n\n          <label className={css['sub-title']}>\n            Number\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Enter the contact's number...\"\n            />\n            <ErrorMessage name=\"number\" component=\"div\" />\n          </label>\n          <button type=\"submit\" className={css['continue-application']}>\n            <div>\n              <div className={css.pencil}></div>\n              <div className={css.folder}>\n                <div className={css.top}>\n                  <svg viewBox=\"0 0 24 27\">\n                    <path d=\"M1,0 L23,0 C23.5522847,-1.01453063e-16 24,0.44771525 24,1 L24,8.17157288 C24,8.70200585 23.7892863,9.21071368 23.4142136,9.58578644 L20.5857864,12.4142136 C20.2107137,12.7892863 20,13.2979941 20,13.8284271 L20,26 C20,26.5522847 19.5522847,27 19,27 L1,27 C0.44771525,27 6.76353751e-17,26.5522847 0,26 L0,1 C-6.76353751e-17,0.44771525 0.44771525,1.01453063e-16 1,0 Z\"></path>\n                  </svg>\n                </div>\n                <div className={css.paper}></div>\n              </div>\n            </div>\n            Add contact\n          </button>\n        </Form>\n      </Formik>\n    </section>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"Overlay\":\"EditModal_Overlay__I+Zi7\",\"Modal\":\"EditModal_Modal__G-dVu\",\"form\":\"EditModal_form__xyRoi\",\"form-title\":\"EditModal_form-title__TiNht\",\"input-container\":\"EditModal_input-container__bQ4sI\",\"submit\":\"EditModal_submit__Lwoj+\",\"label\":\"EditModal_label__UaUMD\"};","import css from 'components/EditModal/EditModal.module.css';\n\nimport React, { useEffect } from 'react';\nimport { createPortal } from 'react-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { getEditedContact } from 'redux/contacts/contactSlice';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport { closeModal } from 'redux/contacts/contactSlice';\nimport { Formik, Form, Field } from 'formik';\nimport { editContactThunk } from 'redux/contacts/contact-operation';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nconst modalRoot = document.querySelector('#modal-root');\n\nexport const EditModal = () => {\n  const dispatch = useDispatch();\n  const { name, number, id } = useSelector(getEditedContact);\n  const contactsList = useSelector(getContacts);\n  const initialValue = { name, number };\n\n  useEffect(() => {\n    const onEscClick = e => {\n      if (e.code === 'Escape') {\n        dispatch(closeModal());\n      }\n    };\n    window.addEventListener('keydown', onEscClick);\n\n    return () => {\n      window.removeEventListener('keydown', onEscClick);\n    };\n  }, [dispatch]);\n\n  const onBackdropClick = e => {\n    if (e.currentTarget === e.target) {\n      dispatch(closeModal());\n    }\n  };\n\n  const handleSubmit = editedContact => {\n    if (\n      contactsList.some(contact => {\n        return contact.name === editedContact.name;\n      })\n    ) {\n      toast.error(`${editedContact.name} is alredy in Phonebook `);\n      return;\n    }\n    console.log('editedContact:', editedContact);\n    editedContact.id = id;\n    dispatch(editContactThunk(editedContact));\n    toast.success(`${editedContact.name} was change!`);\n    dispatch(closeModal());\n  };\n\n  return createPortal(\n    <div className={css.Overlay} onClick={onBackdropClick}>\n      <div className={css.Modal}>\n        <Formik initialValues={initialValue} onSubmit={handleSubmit}>\n          <Form className={css.form}>\n            <p className={css['form-title']}>Sign in to your account</p>\n            <div className={css['input-container']}>\n              <label htmlFor=\"name\" className={css.label}>\n                Name\n                <Field type=\"text\" name=\"name\" placeholder=\"Enter email\" />\n              </label>\n            </div>\n            <div className={css['input-container']}>\n              <label htmlFor=\"number\" className={css.label}>\n                Number\n                <Field type=\"tel\" name=\"number\" placeholder=\"Enter password\" />\n              </label>\n            </div>\n            <button type=\"submit\" className={css.submit}>\n              Change\n            </button>\n            <button\n              type=\"button\"\n              name=\"close\"\n              onClick={() => dispatch(closeModal())}\n            >\n              Close\n            </button>\n          </Form>\n        </Formik>\n      </div>\n    </div>,\n    modalRoot\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Contacts_title__-mq9F\",\"item\":\"Contacts_item__WTDnh\",\"span\":\"Contacts_span__lA8AJ\",\"close\":\"Contacts_close__wzEmM\",\"icon\":\"Contacts_icon__1Uzfe\",\"edit\":\"Contacts_edit__66Wdq\"};","// extracted by mini-css-extract-plugin\nexport default {\"notification\":\"Notification_notification__SfISU\"};","import css from 'components/Notification/Notification.module.css';\nimport PropTypes from 'prop-types';\n\nexport const Notification = ({ message }) => {\n  return <p className={css.notification}>{message}</p>;\n};\nNotification.propTypes = {\n  message: PropTypes.string,\n};\n","import { useDispatch, useSelector } from 'react-redux';\n\nimport { deleteContactThunk } from 'redux/contacts/contact-operation';\nimport { getFilter } from 'redux/filter/sliceFilter';\nimport { getContacts } from 'redux/contacts/contactSlice';\nimport { openModal } from 'redux/contacts/contactSlice';\nimport { EditModal } from 'components/EditModal/EditModal';\n\nimport { isShowModal } from 'redux/contacts/contactSlice';\nimport css from 'components/Contacts/Contacts.module.css';\nimport React from 'react';\nimport { Notification } from 'components/Notification/Notification';\n\nimport { toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nexport const Contacts = ({ children }) => {\n  const dispatch = useDispatch();\n  const contactsList = useSelector(getContacts);\n  const filter = useSelector(getFilter);\n\n  const filteredContactsFunc = () => {\n    const list = contactsList.filter(contact => {\n      const contactWords = contact.name.toLowerCase().split(' ');\n      return contactWords.some(word => word.startsWith(filter.toLowerCase()));\n    });\n    return list;\n  };\n  const filteredContacts = filteredContactsFunc();\n\n  const contactName = id => {\n    const index = filteredContacts.findIndex(contact => contact.id === id);\n    const nameContact = filteredContacts[index].name;\n    return nameContact;\n  };\n\n  const deleteContactsFunc = contactId => {\n    dispatch(deleteContactThunk(contactId));\n\n    toast.info(`${contactName(contactId)} was deleted!`);\n  };\n\n  const isOpen = useSelector(isShowModal);\n\n  return (\n    <>\n      <section>\n        <h2 className={css.title}>Contacts</h2>\n        {children}\n        {filteredContacts.length > 0 ? (\n          <ul>\n            {filteredContacts.map(({ id, name, number }) => (\n              <li key={id} className={css.item}>\n                <span className={css.span}>{name} </span>\n                <span className={css.span}>{number}</span>\n                <button\n                  type=\"button\"\n                  className={css.edit}\n                  title=\"Edit\"\n                  onClick={() => {\n                    dispatch(openModal({ id, name, number }));\n                    console.log('isOpen:', isOpen);\n                  }}\n                >\n                  <svg\n                    viewBox=\"0 0 32 32\"\n                    wwidth=\"16\"\n                    height=\"16\"\n                    fill=\"currentColor\"\n                    className={css.icon}\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                  >\n                    <path d=\"M27 0c2.761 0 5 2.239 5 5 0 1.126-0.372 2.164-1 3l-2 2-7-7 2-2c0.836-0.628 1.874-1 3-1zM2 23l-2 9 9-2 18.5-18.5-7-7-18.5 18.5zM22.362 11.362l-14 14-1.724-1.724 14-14 1.724 1.724z\"></path>\n                  </svg>\n                </button>\n                <button\n                  type=\"button\"\n                  className={css.close}\n                  title=\"Delete\"\n                  onClick={() => deleteContactsFunc(id)}\n                >\n                  <svg\n                    xmlns=\"http://www.w3.org/2000/svg\"\n                    width=\"16\"\n                    height=\"16\"\n                    fill=\"currentColor\"\n                    className={css.icon}\n                    viewBox=\"0 0 16 16\"\n                  >\n                    <path d=\"M5.5 5.5A.5.5 0 0 1 6 6v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm2.5 0a.5.5 0 0 1 .5.5v6a.5.5 0 0 1-1 0V6a.5.5 0 0 1 .5-.5zm3 .5a.5.5 0 0 0-1 0v6a.5.5 0 0 0 1 0V6z\" />\n                    <path\n                      fillRule=\"evenodd\"\n                      d=\"M14.5 3a1 1 0 0 1-1 1H13v9a2 2 0 0 1-2 2H5a2 2 0 0 1-2-2V4h-.5a1 1 0 0 1-1-1V2a1 1 0 0 1 1-1H6a1 1 0 0 1 1-1h2a1 1 0 0 1 1 1h3.5a1 1 0 0 1 1 1v1zM4.118 4 4 4.059V13a1 1 0 0 0 1 1h6a1 1 0 0 0 1-1V4.059L11.882 4H4.118zM2.5 3V2h11v1h-11z\"\n                    />\n                  </svg>\n                </button>\n              </li>\n            ))}\n          </ul>\n        ) : (\n          <Notification message=\"There is no contact\"></Notification>\n        )}\n      </section>\n      {isOpen && <EditModal></EditModal>}\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"title\":\"Filter_title__pSkfx\"};","import { setFilter, getFilter } from 'redux/filter/sliceFilter';\nimport { useDispatch, useSelector } from 'react-redux';\nimport css from 'components/Filter/Filter.module.css';\n\nimport React from 'react';\n\nexport const Filter = () => {\n  const filter = useSelector(getFilter);\n  const dispatch = useDispatch();\n  const onFilterContacts = query => {\n    dispatch(setFilter(query.target.value));\n  };\n\n  return (\n    <>\n      <label className={css.title}>\n        Find contact by name\n        <input\n          type=\"text\"\n          value={filter}\n          name=\"filter\"\n          onChange={onFilterContacts}\n          placeholder=\"Enter the filter value...\"\n        />\n      </label>\n    </>\n  );\n};\n","// extracted by mini-css-extract-plugin\nexport default {\"contact-container\":\"ContactPage_contact-container__E-xvB\"};","import { useDispatch } from 'react-redux';\nimport { useEffect } from 'react';\nimport { fetchContactsThunk } from 'redux/contacts/contact-operation';\n\nimport { InputForm } from 'components/InputForm/InputForm';\nimport { Contacts } from 'components/Contacts/Contacts';\nimport { Filter } from 'components/Filter/Filter';\n\nimport { ToastContainer } from 'react-toastify';\n// import 'react-toastify/dist/ReactToastify.css';\nimport css from 'pages/ContactsPage/ContactPage.module.css';\n\nconst ContactPage = () => {\n  const dispatch = useDispatch();\n  useEffect(() => {\n    dispatch(fetchContactsThunk());\n  }, [dispatch]);\n\n  return (\n    <div className={css['contact-container']}>\n      <InputForm></InputForm>\n      <Contacts>\n        <Filter></Filter>\n      </Contacts>\n      <ToastContainer autoClose={3000} theme=\"colored\" />\n    </div>\n  );\n};\nexport default ContactPage;\n"],"names":["nanoid","size","crypto","getRandomValues","Uint8Array","reduce","id","byte","toString","toUpperCase","_objectWithoutProperties","source","excluded","key","i","target","sourceKeys","Object","keys","length","indexOf","getOwnPropertySymbols","sourceSymbolKeys","prototype","propertyIsEnumerable","call","r","e","t","f","n","Array","isArray","arguments","initialValue","name","number","schema","yup","shape","matches","message","required","InputForm","dispatch","useDispatch","contactsList","useSelector","getContacts","loginInputId","className","css","initialValues","validationSchema","onSubmit","newContact","resetForm","some","contact","toast","addContactThunk","htmlFor","type","placeholder","component","viewBox","d","modalRoot","document","querySelector","EditModal","getEditedContact","useEffect","onEscClick","code","closeModal","window","addEventListener","removeEventListener","createPortal","onClick","currentTarget","editedContact","console","log","editContactThunk","Notification","Contacts","children","filter","getFilter","filteredContacts","toLowerCase","split","word","startsWith","deleteContactsFunc","contactId","deleteContactThunk","index","findIndex","contactName","isOpen","isShowModal","map","title","openModal","wwidth","height","fill","xmlns","width","fillRule","Filter","value","onChange","query","setFilter","fetchContactsThunk","autoClose","theme"],"sourceRoot":""}